wh me=Beginning installation of lib-look...
@prog lib-look
1 99999 d
1 i
( cmd/lib-look: $Date: 2008/06/14 14:06:56 $ $Revision: 1.41 $                )
( Purpose: Replicate and enhance the inserver look routine                    )
( Author: Unknown                                                             )
( Contributors: Feaelin                                                       )
( Dependencies: lib-strings, lib-match, lib-unparseobj                        )
( --------------------------------------------------------------------------- )
( Features to be aware of:                                                    )
(                                                                             )
( If you need programs to run when a player looks you can set a property in   )
( the ~look property dir anywhere in the environment to the dbref of the      )
( program you want to run. For example an obvious exits program could be set  )
( in ~look/obviousexits on #0, and it would run that program. The output is   )
( displayed after the description but before the Contents list.               )
(                                                                             )
( Similarly, if you set ~look/contents-handler to a program dbref, look will  )
( call the program specified with a dbref of an item its listing in a contents)
( list and Look in parentheses at the top of the stack. The program should    )
( return only a string which will either be appended with parentheses to the  )
( list OR You can specify the format of the list-item by setting the property )
( ~/look/contents-format. In that property %normal% represents the regular    )
( part of the string, %extra% represents the portion that your program will   )
( return. Any other text in the property is displayed normally.               )
( --------------------------------------------------------------------------- )
( The following functions are included in this library:                       )
( LOOK-safecall:  x d --                                                      )
(      Takes a dbref which is assumed to be a command or @desc-like program   )
(      that takes one parameter, usually a string, and returns no values.     )
(      It ensures that none of the variables me, loc, trigger, or command     )
(      are modified, and that no garbage is left behind on the stack.         )
( LOOK-unparse:  d -- s                                                       )
(      Takes a dbref, and returns either just its name, or the name plus      )
(      flags, depending on the permissions of me @.                           )
( LOOK-std-filter: d -- i                                                     )
(      A typical filter for LOOKcontents-filter. If you need all the normal   )
(      filtering plus more, you can call this inside of your own filter to    )
(      prevent reinvention of the wheel...                                    )
( LOOK-contents-filter:  a d -- d... i                                        )
(      Takes the address of a 'filter' routine and a dbref, and returns a     )
(      range on the stack of the filtered contents of the db-item. The first  )
(      item to print is the bottom of the stack range.  The filter should     )
(      be  d -- i; it takes a dbref and returns a true/false value to say     )
(      whether or not the dbref should be put into the list.                  )
( LOOK-get-contents:  d -- d... i                                             )
(      Takes a dbref, and returns the list of its contents, filtered through  )
(      the standard filter which acts like the server's contents list:        )
(      Dark rooms don't list anything unless the room or the db-items are     )
(      yours, dark db-items not owned by you don't show, and you don't show.  )
(      This list has the first element in the contents at the bottom of the   )
(      stack.                                                                 )
( LOOK-long-display:  d... i --                                               )
(      List the dbref stack range given, in the usual format for the server.  )
(      All elements on separate lines, using unparse.  The bottom element is  )
(      printed first.                                                         )
( LOOK-list-objects:  d --                                                    )
(      Lists all the 'db-items' that are setup by the @object/@detail commands)
(      Parallels long-display.                                                )
( LOOK-detail-dbmatch: d s -- s                                               )
(      Searches for a detail or object created by @object/@detail and returns )
(      its description. Searches only the dbref specified.                    )
( LOOK-detail-desc: s --                                                      )
(      Searches for a detail or object created by @object/@detail and displays)
(      its description. Currently only searches the current room "here".      )
( LOOK-short-list:  d... i -- s                                               )
(      Turns the range of dbrefs on the stack into a properly formatted       )
(      string, with commas.  1 element is just returned, 2 elements returns   )
(      '1 and 2', more elements return '1, 2, 3, and 4' or similar.  Returns  )
(      a null string if there are no elements.  Again, the bottom element is  )
(      first in the list.                                                     )
( LOOK-short-display:  d1 d2 d3 ... di i --                                   )
(      Calls short-list, then prints out "You see <string>." to the user.     )
(      Prints "You see nothing." if nothing is on the list.                   )
( LOOK-list-contents:  s d --                                                 )
(      Calls get-contents followed by long-display and list-objects to print  )
(      out all of the contents of the given dbref. If there are any contents  )
(      listed, then  the string on the stack is printed out, for "Contents:"  )
(      or the like. If the contents list is empty, the string is ignored.     )
( LOOK-str-desc:  s --                                                        )
(      Takes string 's', and prints it out as a description. Matches the      )
(      '@###' and '@$prog' values properly, and uses them with the present    )
(      trigger value.  If neither of these exist, or if they're invalid,      )
(      the rest of the string is just printed out. Does NOT parse MPI.        )
( LOOK-dbstr-desc:  d s --                                                    )
(      Runs str-desc, using the value d on the stack as the effective         )
(      trigger value. Parses MPI as appropiate.                               )
( LOOK-db-desc:  d --                                                         )
(      Does a full description of the db-item, including name and succ/fail   )
(      if the dbref given is a room, and contents. All programs run with      )
(      the dbref given in 'trigger @'. Will return the proper values for      )
(      dbref's #-1 and #-2 as well. Parses MPI as appropiate.                 )
( LOOK-cmd-look:  s --                                                        )
(      Does a match function, then calls db-desc with the results.  This      )
(      will simulate the usual 'look' command.                                )
(                                                                             )
(      This now includes support for FENI [Fully Extensible Name Interface]   )
(      programs. If you set following properties on the program database item:)
(        @set <program>=_feni-lib:$lib/<some-feni-library>                    )
(        @set <program>=_feni-match-word:<name of public word>                )
(      Look will call the word in specified in the property with the string   )
(      to be matched on the top of the stack. It will expect a database ref   )
(      to be returned by the word. So the prototype for your feni-match word  )
(      should be: [ s -- d ]. Return any 'negative' database reference number )
(      to indicate there wasn't a match or it was ambiguous. In other words,  )
(      your feni-match word should parallel 'match' in the way it operates.   )
(      If your feni-match word doesn't, I recommend creating another word to  )
(      rearrange the stack appropiately around your actual feni-match word.   )
( --------------------------------------------------------------------------- )
( 
  $Log: lib-look,v $
  Revision 1.41  2008/06/14 14:06:56  feaelin
  Corrected bug in db-desc where it left items on the stack.
  Added support for 'look at ...' to work more or less like Foxen's look at.

  Revision 1.40  2008/02/08 06:38:10  feaelin
  Repaired issues where the contents-handler didn't operate correctly.

  Revision 1.39  2006/08/03 19:57:53  feaelin
  No longer needed the include to the glow lib.

  Revision 1.38  2006/08/02 13:17:23  feaelin
  Updated documentation.

  Revision 1.37  2006/07/30 19:44:20  feaelin
  Added support for various FENI programs.

  Revision 1.36  2005/09/25 23:14:27  feaelin
  Formatting cleanup.

  Revision 1.35  2005/09/09 22:17:20  feaelin
  Sticky/Silent now hides dark items, regardless of control.
 
  Revision 1.34  2005/04/21 18:04:34  feaelin
  Fixed logic flaw. If a player is viewed that has stuff, it potentially will
  bomb when trying to show the contents.
 
  Revision 1.33  2005/04/21 03:25:05  feaelin
  Add support for the contents of containers.
 
  Revision 1.32  2005/04/20 01:17:24  feaelin
  Fixed issue where on mu*s that aren't using the contents-handler, that
  the look errors when it reaches the contents lister.
 
  Revision 1.31  2005/04/19 22:12:37  feaelin
  Sigh. Updated _docs property again.
 
  Revision 1.30  2005/04/19 22:11:04  feaelin
  Rearranged documentation
  Updated description and _docs property.
 
  Revision 1.29  2005/04/19 20:04:29  feaelin
  Amazing how one 'pop' in the wrong place does so much damage.
 
  Revision 1.28  2005/04/19 19:34:50  feaelin
  Added a feature by which a muck can make local changes to the contents list
  withouth changing lib-look.
 
  Revision 1.27  2005/04/07 21:19:52  feaelin
  Added Library Symbols
 
  Revision 1.26  2005/04/06 19:28:19  feaelin
  Documented the ~look property directory feature.
 
  Revision 1.25  2005/04/05 21:32:48  feaelin
  Removed unneeded $include statements ...no actual calls to those libraries.
  Revised library words to be in line with the standard and fixed calls to
  lib-strings and lib-unparseobj as well.
 
  Revision 1.24  2005/04/05 13:42:16  feaelin
  General documentation cleanup.
  Improvements made to the installer script.
 
  Revision 1.23  2005/03/21 01:31:43  feaelin
  General maintenance and documentation updates
 
  Revision 1.22  2005/01/15 06:35:18  feaelin
  Fixed the problem where programs relying on lib-reflist were expecting
  non feni'd and non-colorized output.
 
  Revision 1.21  2005/01/14 16:32:13  feaelin
  Broad sweep to clear up terminology usage in regards to database
  item/object/thing
 
  Revision 1.20  2004/08/04 18:50:53  feaelin
  Missed part of the calls when checking for #0.
 
  Revision 1.19  2004/08/04 18:41:15  feaelin
  Fix so that if you have an @ sign in your desc it doesn't try to use it
  to call #0 as a program.
 
  Revision 1.18  2004/05/19 18:50:10  feaelin
  Removed erroneous striplead and striptail, which would mess carefully spaced
  descriptions and lsedit lists.
 
  Revision 1.17  2004/04/22 19:44:21  feaelin
  Fixed issue where darked players were hidden from wizards.
 
  Revision 1.16  2004/04/22 17:25:53  feaelin
  Documentation Cleanup
 
  Revision 1.15  2004/04/22 17:16:22  feaelin
  Added support for player darking via the /@/dark:yes prop
 
  Revision 1.14  2004/04/22 01:52:09  feaelin
  Fixed issues with LOOKshort-list where it wasn't colorizing as you might
  expect it to.
 
  Revision 1.13  2004/04/20 22:05:52  feaelin
  Okay. This time, I REALLY made std-filter public. And fixed the docs up
  properly.
 
  Revision 1.12  2004/04/20 21:55:45  feaelin
  Made the standard filter [LOOKstd-filter] public so extended filters can be
  written without having to recreate the functionality of std-filter.
  
  Revision 1.11  2004/04/15 21:15:11  feaelin
  New Feature: ~look props. Similar in function to ~connect/~arrive/~idle
  props, you can now do: @set <item>=~look/<name>:<ref> and the program
  <ref> will be executed when <item> is looked at. As you might expect, the
  property may be set on parent rooms or #0, to have programs that are
  executed for the entire area/muck.
  
  Revision 1.10  2004/04/13 23:18:24  feaelin
  Added support for IDESCs
  
  Revision 1.9  2004/04/12 15:50:55  feaelin
  Fixed bug in look that caused it to display dbrefs & flags for players that
  had 'color' turned on.
  
  Revision 1.8  2004/04/12 14:57:51  feaelin
  Fixed issue where obvious things like 'me' and 'here' didn't match correctly
  in cmd-look. Changed failed messages to use the FAIL color code.
  
  Revision 1.7  2004/04/11 19:58:28  feaelin
  Changed detail-desc in preparation for adding functionality to match
  details against players and things in the room.
  Cleaned up the docs so that they display correctly for the MUF editor's
  'view' command.
  
  Revision 1.6  2004/04/11 18:46:00  feaelin
  Added the library calls LOOKxxx, to be more inline with the standard.
  Added support for @object/@detail details. Correspondingly added some
  related library calls.
  
  Revision 1.5  2004/04/10 17:24:47  feaelin
  Fixed minor issues in the std-filter function.
  
  Revision 1.4  2004/04/10 15:09:40  feaelin
  Fixed issue where if you didn't control the item, or you were set silent,
  the database item name wasn't colorized.
  
  Revision 1.3  2004/04/08 13:38:36  feaelin
  Fixed issues where lib-look didn't parse color in descriptions by default.
  Fixed issue where lib-look didn't parse MPI in descriptions and messages.
  Further cleaned up dependency on macros.
  
  Revision 1.2  2004/03/26 03:21:18  feaelin
  Reduced macro/library dependence.
)
( --------------------------------------------------------------------------- )
$include $lib/strings
$include $lib/match
$include $lib/unparseobj

lvar sme
lvar sloc
lvar strigger
lvar scommand
lvar sdepth
lvar realtrig
 
: otell
  ( Display string to everyone in my room except me )
  loc @ me @ rot ansi_notify_except ( s -- )
;
 
: tell
  me @ swap ansi_notify
;
 
: safecall  ( x d -- )
  me @ sme !
  loc @ sloc !
  trigger @ strigger !
  command @ scommand !
  depth sdepth !
  call
  sme @ me !
  sloc @ loc !
  strigger @ trigger !
  scommand @ command !
  depth 2 + sdepth @ - popn
;
 
: control? ( d -- i )
  me @ swap controls me @ "silent" flag? not and
;
 
: dark? ( d -- i )
  dup "Dark" flag? swap control? not and
;
 
( To allow the administrators to add additional text to the contents list     )
( on a per item basis, we'll check to see if there is a program handler and   )
( also check to see if there is a format string.                              )
( The program handler needs to use a dbref and return a string while leaving  )
( everything else on the stack.                                               )
: unparse-secondary ( s d -- s )
  dup -3 rotate "~look/contents-handler" envpropstr swap pop
  dup "" strcmp if
    dup dbref? not if
      dup string? if
        dup "#" instr if
          1 strcut swap pop
        then
        atoi dbref
      else
        dup int? if
          dbref
        then
      then
    then
    dup ok? over #0 dbcmp not and if
      dup program? if
        dup "LINK_OK" flag? if
          me @ sme !
          loc @ sloc !
	  trigger @ strigger !
	  command @ scommand !
	  depth sdepth !
	  3 pick swap "(Look)" command ! call
	  sme @ me !
	  sloc @ loc !
	  strigger @ trigger !
	  scommand @ command !
	  depth sdepth @ - popn
        else
          pop ""
        then
      else
        pop ""
      then
    else
      pop ""
    then
  then
  rot "~look/contents-format" envpropstr swap pop
  dup "" strcmp not if
    pop
    dup "" strcmp not if
      pop
    else
      " (" swap strcat strcat ")" strcat
    then
  else
    swap "%extra%" subst
    swap "%normal%" subst
  then
;
 
: unparse ( d -- s )
  me @ "Silent" flag? if
    "%P" UPO-special-unparseobj exit
  then
  dup control? not
  if
    dup "Link_OK" flag? not
    if
      dup "Chown_OK" flag? over player? not and not
      if
        dup "Abode" flag? not
        if
          "%P" UPO-special-unparseobj exit
        then
      then
    then
  then
  UPO-color-unparseobj
;
 
( Don't see rooms.  Don't see programs you can't link to. )
( Don't see dark things, except you always see zombies and players. )
: std-filter ( d -- i )
  dup me @ dbcmp if pop 0 exit then
  dup room? if pop 0 exit then
  dup player? if
    dup me @ swap controls if
      pop 1 exit
    else
      prog "@allowdarkplayers" getpropstr "yes" strcmp not if
        dup "@/dark" getpropstr "yes" strcmp swap pop exit
      else
        pop 1 exit
      then
    then
  then
  dup dup thing? swap "z" flag? and if
    dup me @ swap controls if
      pop 1 exit
    else
      prog "@allowdarkplayers" getpropstr "yes" strcmp not if
        dup "@/dark" getpropstr "yes" strcmp swap pop exit
      else
        pop 1 exit
      then
    then
  then
  dup program? if
    dup control? over "Link_OK" flag? or if
      pop 1 exit
    else
      pop 0 exit
    then
  then
  dup "dark" flag? if pop 0 exit then
  pop 1 
; PUBLIC std-filter
 
: contents-filter ( a d -- d... i )
  contents 0 rot rot
  begin
    dup
  while
    over over swap execute
    if
      rot 1 + rot rot dup -4 rotate
    then
    next
  repeat
  pop pop
;
 
: get-contents ( d -- d... i )
  dup dark?
  if
    pop 0
  else
    'std-filter swap contents-filter
  then
;
 
: long-display ( d... i -- )
  begin
    dup
  while
    1 - dup 2 + rotate
    dup dbref?
    if
      dup unparse
      swap unparse-secondary
    then
    tell
  repeat
  pop
;
 
: short-list ( d... i -- s )
  dup 3 <
  if
    1 - dup 2 + rotate "%P" UPO-special-unparseobj over
    if
      " " strcat
    then
  else
    ""
    begin
      over 1 >
    while
      swap 1 - swap over 3 + rotate "%P" UPO-special-unparseobj
      "^WHITE^, " strcat strcat
    repeat
  then
  swap
  if
    "^WHITE^and " strcat swap "%P" UPO-special-unparseobj strcat
  then
;
 
: short-list-n ( d... i -- s )
  dup 3 <
  if
    1 - dup 2 + rotate name over
    if
      " " strcat
    then
  else
    ""
    begin
      over 1 >
    while
      swap 1 - swap over 3 + rotate name
      "^WHITE^, " strcat strcat
    repeat
  then
  swap
  if
    "^WHITE^and " strcat swap name strcat
  then
;
 
: short-display ( d... i -- )
  short-list dup
  if
    "You see " swap strcat "." strcat tell
  else
    "You see nothing." tell
  then
;  
 
: list-objects ( d -- )
  dup "_obj/" nextprop
  begin
    dup "" strcmp while
    dup ";" STR-split pop
    "/" STR-split swap pop
    "thing" UPO-color-query
    me @ "silent" flag? not if
      3 pick control? if
        "^YELLOW^(detail)" strcat
      then
    then
    tell
    over swap nextprop
  repeat
  pop pop
; PUBLIC list-objects
 
: list-contents ( s d -- )
  dup "_obj/" nextprop STR-blank? not swap
  dup get-contents dup dup 4 + rotate or
  if
    dup 3 + rotate tell
    long-display
    list-objects
  else
    3 popn
  then
;
 
: look-prop-handler ( d s -- )
  over swap nextprop
  dup "" strcmp not if pop pop exit then
  begin
    over over getprop
    dup dbref? not if
      dup string? if
        dup "#" instr if
          1 strcut swap pop
        then
        atoi dbref
      else
        dup int? if
          dbref
        then
      then
    then
    over "contents-handler" instr not if
      over "contents-format" instr not if
        dup ok? over #0 dbcmp not and if
          dup program? if
            dup "LINK_OK" flag? if
              "(Look)" swap safecall
            else
              pop
            then
          else
            pop
          then
        else
          pop
        then
      else
        pop
      then
    else
      pop
    then
    over swap nextprop dup "" strcmp not
  until
  pop pop
; 
 
: look-prop2 ( d -- )
  dup "~look/"
  nextprop "" strcmp if
    "~look/" look-prop-handler
  else
    pop
  then
;
 
: look-prop ( d -- )
  begin
    dup look-prop2
    location
    dup #-1 dbcmp 
  until
  pop
; PUBLIC look-prop
 
: str-desc ( s -- )
  dup
  if
    dup "@" 1 strncmp
    if
      tell
    else
      1 strcut swap pop " " STR-split striplead striptail swap
      dup "$" 1 strncmp
      if
        atoi dbref
      else
        match
      then
      dup ok? over #0 dbcmp not and
      if
        dup trigger @ owner swap controls over "Link_OK" flag? or
        if
          safecall
        else
          pop pop "Permission Denied" tell
        then
      else
        pop tell
      then
    then
  else
    pop "You see nothing special." tell
  then
;
 
: dbstr-desc ( d s -- )
  swap trigger @ realtrig ! trigger !
  trigger @ swap "(@Desc)" 1 parsempi str-desc
  realtrig @ trigger !
;
 
: db-desc ( d -- )
  dup #-1 dbcmp
  if
    pop "^FAIL^I don't see that here." tell exit
  then
  dup #-2 dbcmp
  if
    pop "^FAIL^I don't know which one you mean!" tell exit
  then
  dup trigger @ realtrig ! trigger !
  dup room? over me @ location dbcmp or
  if
    dup unparse tell
  then
  dup me @ location dbcmp over room? not and
  over "/_/ide" getpropstr STR-blank? not and if
    dup "/_/ide" "(@Idesc)" 1 parseprop
  else
    dup "/_/de" "(@Desc)" 1 parseprop
  then
  str-desc
  dup look-prop ( handle the ~look prop )
  dup room? over me @ location dbcmp or
  if
    me @ over locked?
    if
      dup "/_/fl" "(@Fail)" 1 parseprop dup
      if
        str-desc
      else
        pop
      then
      dup "/_/ofl" "(@OFail)" 1 parseprop dup
      if
        otell
      else
        pop
      then
    else
      dup "/_/sc" "(@Succ)" 1 parseprop dup
      if
        str-desc
      else
        pop
      then
      dup "/_/osc" "(@OSucc)" 1 parseprop dup
      if
        otell
      else
        pop
      then
    then
    "^BLUE^Contents:" over list-contents
  else
    dup player?
    if
      "^BLUE^Carrying:" over list-contents
    else
      dup thing?
      if
        "^BLUE^Contents:" over list-contents
      then
    then
  then
  realtrig @ trigger !
  pop
;
 
: detail-dbmatch ( d s -- s )
  swap dup "_obj/" nextprop
  begin
    dup "" strcmp while
    dup 4 pick instring if
      over swap getprop
      0 while
    then
    over swap nextprop
  repeat
  dup "" strcmp if -3 rotate pop pop exit then
  pop
  dup "_det/" nextprop
  begin
    dup "" strcmp while
    dup 4 pick instring if
      over swap getprop
      0 while
    then
    over swap nextprop
  repeat
  -3 rotate pop pop
; PUBLIC detail-dbmatch
 
: detail-desc ( s -- )
  dup
  "here" match dup rot 
  detail-dbmatch
  "(@Desc)" 1 parsempi
  dup "" strcmp if
    str-desc
    pop 1 exit
  then
  pop 0 exit
; PUBLIC detail-desc
 
: get-feni-lib ( -- s )
  prog "_feni-lib" getpropstr dup "" strcmp not if
     pop #0 "_feni-lib" getpropstr
  then
;
 
: get-feni-match-word ( -- s )
  prog "_feni-match-word" getpropstr dup "" strcmp not if
     pop #0 "_feni-match-word" getpropstr
  then
;
 
( If there is a FENI program out there, make use of it. ) 
: look-feni-match ( s -- d )
  ( We should check depth and use checkargs? )
  get-feni-lib dup "" strcmp not if
    pop #-1 exit
  then
  match program? if
    get-feni-lib match
    get-feni-match-word dup "" strcmp not if
      pop #-1 exit
    then
    call
  else
    #-1
  then
;
 
: cmd-look ( s -- )
  command @ "lookat" stringcmp not if
    "look" command ! "at " swap strcat
  then
  ( If no arguement, assume looking at the current room )
  dup STR-blank? if
    pop "here"
  else ( otherwise, check for 'lookat' functionality )
    strip ( cleanup extraneous whitespace )
    dup " " STR-split swap strip ( split first arg: "joeplayer's foo..." "at" )
    "at" stringcmp not if ( If it is an at, proceed )
      dup STR-blank? if ( if the rest is empty, then bail out )
        me @ "^FAIL^Look at what?!" ansi_notify
        pop pop exit
      then
      " " STR-split swap ( split off 2nd arg: "foo..." "Joeplayer's" )
      dup "'" instr if ( is the apostrophe present? )
        "'" STR-split ( toss the "'s": "foo..." "joeplayer" "s")
        dup "s" strcmp swap "" strcmp and if
          3 popn
          me @ "^FAIL^Whatever do you mean?!" ansi_notify
          exit
        else
          MATCH-noisy_pmatch ( find the player )
          dup #-1 dbcmp if ( oh. noisy-pmatch complained, bail )
            2 popn exit ( clean up and exit )
          then
          over STR-blank? if ( is the target item not specified? )
            name me @ swap "^FAIL^Look at " swap strcat "'s what?" strcat ansi_notify
            pop pop
            exit
          then
          swap over over rmatch ( search for the target in player's inventory )
          dup ok? if
            dup "_remote_look?" getpropstr tolower ( found it, is it remotelookable? )
            "y" 1 strncmp not if
              dup "_remote_desc" getpropstr ( it is, does it have a remote desc? )
              dup STR-blank? if
                pop db-desc 3 popn exit ( display normal desc )
              else
                dbstr-desc 3 popn exit ( display remote desc )
              then
            else
              ( not remote lookable, but is there a detail with same name? )
              pop detail-dbmatch dup if
                me @ swap ansi_notify ( haha! display the detail )
                pop exit
              else
                ( Ah. Nothing actually there at all )
                pop pop
                me @ "^FAIL^I don't see that here." ansi_notify 
                exit
              then
            then
          else ( no 'thing' found, see if there is a @detail/@object )
            pop detail-dbmatch dup if
              me @ swap ansi_notify ( haha! display the detail )
              pop exit
            else
              ( Ah. Nothing actually there at all )
              pop me @ "^FAIL^I don't see that here." ansi_notify 
              exit
            then
          then
        then
      else
        swap pop swap pop
      then
    else ( not an "at", proceed to normal processing )
      pop
    then
  then
  dup match
  dup ok? not if
    pop dup look-feni-match dup ok? if
      db-desc exit
    then
    pop
    detail-desc not if
      pop me @ "^FAIL^I don't see that here." ansi_notify
    then
  else
    swap pop db-desc
  then
;
 
public safecall
public unparse
public contents-filter
public get-contents
public long-display
public short-list
public short-list-n
public short-display
public list-contents
public str-desc
public dbstr-desc
public db-desc
public cmd-look
.
c
q
@register lib-look=lib/look
@register lib-look=cmd/look
@set $lib/look=L
@set $lib/look=S
@set $lib/look=H
@set $lib/look=W3
@set $lib/look=/_defs/.cmd-look:"$lib/look" match "cmd-look" call
@set $lib/look=/_defs/.contents-filter:"$lib/look" match "contents-filter" call
@set $lib/look=/_defs/.db-desc:"$lib/look" match "db-desc" call
@set $lib/look=/_defs/.dbstr-desc:"$lib/look" match "dbstr-desc" call
@set $lib/look=/_defs/.get-contents:"$lib/look" match "get-contents" call
@set $lib/look=/_defs/.list-contents:"$lib/look" match "list-contents" call
@set $lib/look=/_defs/.long-display:"$lib/look" match "long-display" call
@set $lib/look=/_defs/.safecall:"$lib/look" match "safecall" call
@set $lib/look=/_defs/.short-display:"$lib/look" match "short-display" call
@set $lib/look=/_defs/.short-list:"$lib/look" match "short-list" call
@set $lib/look=/_defs/.str-desc:"$lib/look" match "str-desc" call
@set $lib/look=/_defs/.unparse:"$lib/look" match "unparse" call
@set $lib/look=/_defs/LOOKcmd-look:"$lib/look" match "cmd-look" call
@set $lib/look=/_defs/LOOKcontents-filter:"$lib/look" match "contents-filter" call
@set $lib/look=/_defs/LOOKdb-desc:"$lib/look" match "db-desc" call
@set $lib/look=/_defs/LOOKdbstr-desc:"$lib/look" match "dbstr-desc" call
@set $lib/look=/_defs/LOOKdetail-dbmatch:"$lib/look" match "detail-dbmatch" call
@set $lib/look=/_defs/LOOKdetail-desc:"$lib/look" match "detail-desc" call
@set $lib/look=/_defs/LOOKget-contents:"$lib/look" match "get-contents" call
@set $lib/look=/_defs/LOOKlist-contents:"$lib/look" match "list-contents" call
@set $lib/look=/_defs/LOOKlist-objects:"$lib/look" match "list-objects" call
@set $lib/look=/_defs/LOOKlong-display:"$lib/look" match "long-display" call
@set $lib/look=/_defs/LOOKprop:"$lib/look" match "look-prop" call
@set $lib/look=/_defs/LOOKsafecall:"$lib/look" match "safecall" call
@set $lib/look=/_defs/LOOKshort-display:"$lib/look" match "short-display" call
@set $lib/look=/_defs/LOOKshort-list:"$lib/look" match "short-list" call
@set $lib/look=/_defs/LOOKshort-list-n:"$lib/look" match "short-list-n" call
@set $lib/look=/_defs/LOOKstd-filter:"$lib/look" match "std-filter" call
@set $lib/look=/_defs/LOOKstr-desc:"$lib/look" match "str-desc" call
@set $lib/look=/_defs/LOOKunparse:"$lib/look" match "unparse" call
@set $lib/look=/_defs/LOOK-cmd-look:"$lib/look" match "cmd-look" call
@set $lib/look=/_defs/LOOK-contents-filter:"$lib/look" match "contents-filter" call
@set $lib/look=/_defs/LOOK-db-desc:"$lib/look" match "db-desc" call
@set $lib/look=/_defs/LOOK-dbstr-desc:"$lib/look" match "dbstr-desc" call
@set $lib/look=/_defs/LOOK-detail-dbmatch:"$lib/look" match "detail-dbmatch" call
@set $lib/look=/_defs/LOOK-detail-desc:"$lib/look" match "detail-desc" call
@set $lib/look=/_defs/LOOK-get-contents:"$lib/look" match "get-contents" call
@set $lib/look=/_defs/LOOK-list-contents:"$lib/look" match "list-contents" call
@set $lib/look=/_defs/LOOK-list-objects:"$lib/look" match "list-objects" call
@set $lib/look=/_defs/LOOK-long-display:"$lib/look" match "long-display" call
@set $lib/look=/_defs/LOOK-prop:"$lib/look" match "look-prop" call
@set $lib/look=/_defs/LOOK-safecall:"$lib/look" match "safecall" call
@set $lib/look=/_defs/LOOK-short-display:"$lib/look" match "short-display" call
@set $lib/look=/_defs/LOOK-short-list:"$lib/look" match "short-list" call
@set $lib/look=/_defs/LOOK-short-list-n:"$lib/look" match "short-list-n" call
@set $lib/look=/_defs/LOOK-std-filter:"$lib/look" match "std-filter" call
@set $lib/look=/_defs/LOOK-str-desc:"$lib/look" match "str-desc" call
@set $lib/look=/_defs/LOOK-unparse:"$lib/look" match "unparse" call
@set $lib/look=/_docs:@list $lib/look=1-106
@set $lib/look=/_/de:lib-look:List lines 1-106 for documentation.
@set $lib/look=/_lib-version:1.31FM$Revision: 1.41 $
@set $lib/look=/_version:1.31FM$Revision: 1.41 $
@set $lib/look=/_lib-symbol:LOOK
wh me=Installation of lib-look complete.
