"Beginning installation of lib-look...
@prog lib-look
1 99999 d
1 i
( cmd/lib-look: $Date: 2004/04/11 19:58:28 $ $Revision: 1.7 $                 )
( Author: Unknown                                                             )
( Contributors: Feaelin                                                       )
( Dependencies: lib-strings, lib-stackrng, lib-match, lib-unparseobj          )
( --------------------------------------------------------------------------- )
( Set of library routines for doing 'look' functions.                         )
( The following functions are included in this library:                       )
( LOOKsafecall:  x d --                                                       )
(      Takes a dbref which is assumed to be a command or @desc-like program   )
(      that takes one parameter, usually a string, and returns no values.     )
(      It ensures that none of the variables me, loc, trigger, or command     )
(      are modified, and that no garbage is left behind on the stack.         )
( LOOKunparse:  d -- s                                                        )
(      Takes a dbref, and returns either just its name, or the name plus      )
(      flags, depending on the permissions of me @.                           )
( LOOKcontents-filter:  a d -- d... i                                         )
(      Takes the address of a 'filter' routine and a dbref, and returns a     )
(      range on the stack of the filtered contents of the object.  The first  )
(      item to print is the bottom of the stack range.  The filter should     )
(      be  d -- i; it takes a dbref and returns a true/false value to say     )
(      whether or not the dbref should be put into the list.                  )
( LOOKget-contents:  d -- d... i                                              )
(      Takes a dbref, and returns the list of its contents, filtered through  )
(      the standard filter which acts like the server's contents list:        )
(      Dark rooms don't list anything unless the room or the objects are      )
(      yours, dark objects not owned by you don't show, and you don't show.   )
(      This list has the first element in the contents at the bottom of the   )
(      stack.                                                                 )
( LOOKlong-display:  d... i --                                                )
(      List the dbref stack range given, in the usual format for the server.  )
(      All elements on separate lines, using unparse.  The bottom element is  )
(      printed first.                                                         )
( LOOKlist-objects:  d --                                                     )
(      Lists all the 'objects' that are setup by the @object/@detail commands )
(      Parallels long-display.                                                )
( LOOKdetail-dbmatch: d s -- s                                                )
(      Searches for a detail or object created by @object/@detail and returns )
(      its description. Searches only the dbref specified.                    )
( LOOKdetail-desc: s --                                                       )
(      Searches for a detail or object created by @object/@detail and displays)
(      its description. Currently only searches the current room "here".      )
( LOOKshort-list:  d... i -- s                                                )
(      Turns the range of dbrefs on the stack into a properly formatted       )
(      string, with commas.  1 element is just returned, 2 elements returns   )
(      '1 and 2', more elements return '1, 2, 3, and 4' or similar.  Returns  )
(      a null string if there are no elements.  Again, the bottom element is  )
(      first in the list.                                                     )
( LOOKshort-display:  d1 d2 d3 ... di i --                                    )
(      Calls short-list, then prints out "You see <string>." to the user.     )
(      Prints "You see nothing." if nothing is on the list.                   )
( LOOKlist-contents:  s d --                                                  )
(      Calls get-contents followed by long-display and list-objects to print  )
(      out all of the contents of the given dbref. If there are any contents  )
(      listed, then  the string on the stack is printed out, for "Contents:"  )
(      or the like. If the contents list is empty, the string is ignored.     )
( LOOKstr-desc:  s --                                                         )
(      Takes string 's', and prints it out as a description. Matches the      )
(      '@###' and '@$prog' values properly, and uses them with the present    )
(      trigger value.  If neither of these exist, or if they're invalid,      )
(      the rest of the string is just printed out. Does NOT parse MPI.        )
( LOOKdbstr-desc:  d s --                                                     )
(      Runs str-desc, using the value d on the stack as the effective         )
(      trigger value. Parses MPI as appropiate.                               )
( LOOKdb-desc:  d --                                                          )
(      Does a full description of the object, including name and succ/fail    )
(      if the dbref given is a room, and contents. All programs run with      )
(      the dbref given in 'trigger @'. Will return the proper values for      )
(      dbref's #-1 and #-2 as well. Parses MPI as appropiate.                 )
( LOOKcmd-look:  s --                                                         )
(      Does a match function, then calls db-desc with the results.  This      )
(      will simulate the usual 'look' command.                                )
( --------------------------------------------------------------------------- )
  
( 
  $Log: lib-look,v $
  Revision 1.7  2004/04/11 19:58:28  feaelin
  Changed detail-desc in preparation for adding functionality to match
  details against players and things in the room.
  Cleaned up the docs so that they display correctly for the MUF editor's
  'view' command.

  Revision 1.6  2004/04/11 18:46:00  feaelin
  Added the library calls LOOKxxx, to be more inline with the standard.
  Added support for @object/@detail details. Correspondingly added some
  related library calls.
  
  Revision 1.5  2004/04/10 17:24:47  feaelin
  Fixed minor issues in the std-filter function.
  
  Revision 1.4  2004/04/10 15:09:40  feaelin
  Fixed issue where if you didn't control the item, or you were set silent,
  the database item name wasn't colorized.
  
  Revision 1.3  2004/04/08 13:38:36  feaelin
  Fixed issues where lib-look didn't parse color in descriptions by default.
  Fixed issue where lib-look didn't parse MPI in descriptions and messages.
  Further cleaned up dependency on macros.
  
  Revision 1.2  2004/03/26 03:21:18  feaelin
  Reduced macro/library dependence.
  
  Revision 1.1  1998/08/23 15:47:21  glow
  Initial revision
)
( --------------------------------------------------------------------------- )
$include $lib/strings
$include $lib/match
$include $lib/stackrng
$include $lib/unparseobj
 
lvar sme
lvar sloc
lvar strigger
lvar scommand
lvar sdepth
lvar realtrig
 
: otell
  loc @ me @ rot ansi_notify_except ( s -- ) ( Display string to everyone in my room except me )
;

: tell
  me @ swap ansi_notify
;

: safecall  ( x d -- )
  me @ sme !
  loc @ sloc !
  trigger @ strigger !
  command @ scommand !
  depth sdepth !
  call
  sme @ me !
  sloc @ loc !
  strigger @ trigger !
  scommand @ command !
  depth 2 + sdepth @ - popn
;
 
: control? ( d -- i )
  me @ swap controls
;
 
: dark? ( d -- i )
  dup "Dark" flag? swap control? not and
;

: unparse ( d -- s )
  me @ "Silent" flag?
  if
    "%P" UPOspecial-unparseobj exit
  then
  dup control? not
  if
    dup "Link_OK" flag? not
    if
      dup "Chown_OK" flag? not
      if
        dup "Abode" flag? not
        if
          "%P" UPOspecial-unparseobj exit
        then
      then
    then
  then
  UPOcolor-unparseobj
;
 
( Don't see rooms.  Don't see programs you can't link to. )
( Don't see dark things, except you always see zombies and players. )
: std-filter ( d -- i )
  dup me @ dbcmp if pop 0 exit then
  dup room? if pop 0 exit then
  dup player? if pop 1 exit then
  dup dup thing? swap "z" flag? and if pop 1 exit then
  dup program? if
    dup control? over "Link_OK" flag? or if
      pop 1 exit
    else
      pop 0 exit
    then
  then
  dup "dark" flag? if pop 0 exit then
  pop 1 
;
 
: contents-filter ( a d -- d... i )
  contents 0 rot rot
  begin
    dup
  while
    over over swap execute
    if
      rot 1 + rot rot dup -4 rotate
    then
    next
  repeat
  pop pop
;
 
: get-contents ( d -- d... i )
  dup dark?
  if
    pop 0
  else
    'std-filter swap contents-filter
  then
;
 
: long-display ( d... i -- )
  begin
    dup
  while
    1 - dup 2 + rotate
    dup dbref?
    if
      unparse
    then
    tell
  repeat
  pop
;
 
: short-list ( d... i -- s )
  dup 3 <
  if
    1 - dup 2 + rotate name over
    if
      " " strcat
    then
  else
    ""
    begin
      over 1 >
    while
      swap 1 - swap over 3 + rotate name ", " strcat strcat
    repeat
  then
  swap
  if
    "and " strcat swap name strcat
  then
;
 
: short-display ( d... i -- )
  short-list dup
  if
    "You see " swap strcat "." strcat tell
  else
    "You see nothing." tell
  then
;  
 
: list-details ( d -- )
  dup "_obj/" nextprop
  begin
    dup "" strcmp while
    dup ";" STRsplit pop
    "/" STRsplit swap pop
    "thing" UPOcolor-query
    me @ "silent" flag? not if
      3 pick control? if
        "^YELLOW^(detail)" strcat
      then
    then
    tell
    over swap nextprop
  repeat
  pop pop
; PUBLIC list-details
 
: list-contents ( s d -- )
  dup "_obj/" nextprop STRblank? not swap
  dup get-contents dup dup 4 + rotate or
  if
    dup 3 + rotate tell
    long-display
    list-details
  else
    pop pop
  then
;
 
: str-desc ( s -- )
  striplead striptail dup
  if
    dup "@" 1 strncmp
    if
      tell
    else
      1 strcut swap pop " " STRsplit striplead striptail swap
      dup "$" 1 strncmp
      if
        atoi dbref
      else
        match
      then
      dup ok?
      if
        dup trigger @ owner swap controls over "Link_OK" flag? or
        if
          safecall
        else
          pop pop "Permission Denied" tell
        then
      else
        pop tell
      then
    then
  else
    pop "You see nothing special." tell
  then
;
 
: dbstr-desc ( d s -- )
  swap trigger @ realtrig ! trigger !
  trigger @ swap "(@Desc)" 1 parsempi str-desc
  realtrig @ trigger !
;
 
: db-desc ( d -- )
  dup #-1 dbcmp
  if
    pop "I don't see that here." tell exit
  then
  dup #-2 dbcmp
  if
    pop "I don't know which one you mean!" tell exit
  then
  dup trigger @ realtrig ! trigger !
  dup room?
  if
    dup unparse tell
  then
  dup "/_/de" "(@Desc)" 1 parseprop
  str-desc
  dup room?
  if
$ifndef __version<Muck2.2fb4.5
    (patch since LOCKED? goes too deep)
    me @ over locked?
$else
    0
$endif
    if
      dup "/_/fl" "(@Fail)" 1 parseprop dup
      if
        str-desc
      else
        pop
      then
      dup "/_/ofl" "(@OFail)" 1 parseprop dup
      if
        otell
      else
        pop
      then
    else
      dup "/_/sc" "(@Succ)" 1 parseprop dup
      if
        str-desc
      else
        pop
      then
      dup "/_/osc" "(@OSucc)" 1 parseprop dup
      if
        otell
      else
        pop
      then
    then
    "^BLUE^Contents:" over list-contents
  else
    dup player?
    if
      "^BLUE^Carrying:" over list-contents
    then
  then
  realtrig @ trigger !
  pop
;

: detail-dbmatch ( d s -- s )
  swap dup "_obj/" nextprop
  begin
    dup "" strcmp while
    dup 4 pick instring if
      over swap getprop
      0 while
    then
    over swap nextprop
  repeat
  dup "" strcmp if -3 rotate pop pop exit then
  pop
  dup "_det/" nextprop
  begin
    dup "" strcmp while
    dup 4 pick instring if
      over swap getprop
      0 while
    then
    over swap nextprop
  repeat
  -3 rotate pop pop
; PUBLIC detail-dbmatch

: detail-desc ( s -- )
  dup
  "here" match dup rot 
  detail-dbmatch
  "(@Desc)" 1 parsempi
  dup "" strcmp if
    str-desc
    pop pop 1 exit
  then
  pop 0 exit
; PUBLIC detail-desc
 
: cmd-look ( s -- )
  dup not
  if
    pop "here" match db-desc exit
  then
  dup detail-desc if exit then
  match db-desc
;
 
public safecall
public unparse
public contents-filter
public get-contents
public long-display
public short-list
public short-display
public list-contents
public str-desc
public dbstr-desc
public db-desc
public cmd-look
.
c
q
@register lib-look=lib/look
@register #me lib-look=tmp/prog1
@set $tmp/prog1=L
@set $tmp/prog1=S
@set $tmp/prog1=H
@set $tmp/prog1=W3
@set $tmp/prog1=/_/de:lib-look:List lines 3-60 for documentation.
@set $tmp/prog1=/_defs/.cmd-look:"$lib/look" match "cmd-look" call
@set $tmp/prog1=/_defs/.contents-filter:"$lib/look" match "contents-filter" call
@set $tmp/prog1=/_defs/.db-desc:"$lib/look" match "db-desc" call
@set $tmp/prog1=/_defs/.dbstr-desc:"$lib/look" match "dbstr-desc" call
@set $tmp/prog1=/_defs/.get-contents:"$lib/look" match "get-contents" call
@set $tmp/prog1=/_defs/.list-contents:"$lib/look" match "list-contents" call
@set $tmp/prog1=/_defs/.long-display:"$lib/look" match "long-display" call
@set $tmp/prog1=/_defs/.safecall:"$lib/look" match "safecall" call
@set $tmp/prog1=/_defs/.short-display:"$lib/look" match "short-display" call
@set $tmp/prog1=/_defs/.short-list:"$lib/look" match "short-list" call
@set $tmp/prog1=/_defs/.str-desc:"$lib/look" match "str-desc" call
@set $tmp/prog1=/_defs/.unparse:"$lib/look" match "unparse" call
@set $tmp/prog1=/_defs/LOOKcmd-look:"$lib/look" match "cmd-look" call
@set $tmp/prog1=/_defs/LOOKcontents-filter:"$lib/look" match "contents-filter" call
@set $tmp/prog1=/_defs/LOOKdb-desc:"$lib/look" match "db-desc" call
@set $tmp/prog1=/_defs/LOOKdbstr-desc:"$lib/look" match "dbstr-desc" call
@set $tmp/prog1=/_defs/LOOKdetail-dbmatch:"$lib/look" match "detail-dbmatch" call
@set $tmp/prog1=/_defs/LOOKdetail-desc:"$lib/look" match "detail-desc" call
@set $tmp/prog1=/_defs/LOOKget-contents:"$lib/look" match "get-contents" call
@set $tmp/prog1=/_defs/LOOKlist-contents:"$lib/look" match "list-contents" call
@set $tmp/prog1=/_defs/LOOKlist-details:"$lib/look" match "list-details" call
@set $tmp/prog1=/_defs/LOOKlong-display:"$lib/look" match "long-display" call
@set $tmp/prog1=/_defs/LOOKsafecall:"$lib/look" match "safecall" call
@set $tmp/prog1=/_defs/LOOKshort-display:"$lib/look" match "short-display" call
@set $tmp/prog1=/_defs/LOOKshort-list:"$lib/look" match "short-list" call
@set $tmp/prog1=/_defs/LOOKstr-desc:"$lib/look" match "str-desc" call
@set $tmp/prog1=/_defs/LOOKunparse:"$lib/look" match "unparse" call
@set $tmp/prog1=/_docs:@list $lib/look=1-71
@set $tmp/prog1=/_lib-version:1.31FM$Revision: 1.7 $
@set $tmp/prog1=/_version:1.31FM$Revision: 1.7 $
"Installation of lib-look complete.
