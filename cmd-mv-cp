"Beginning installation of cmd-mv-cp...
@prog cmd-mv-cp
1 99999 d
1 i
( cmd-mv-cp: $Date: 2005/01/14 16:32:13 $ $Revision: 1.3 $                                                )
( Original Author: Unknown                                                    )
( --------------------------------------------------------------------------- )
(   cp [orig][=prop],[dest][=destprop]
      Copies prop from orig to dest, renaming it to destprop.
  
    mv [orig][=prop],[dest][=destprop]
      Moves prop from orig to dest, renaming it to destprop.
  
      Arguments in []s are optional.
      if orig is omitted, it assumes a property on the user.
      if dest is omitten, it assumes dest is the same as orig.
      if destprop is omitted, it assumes the same name as prop.
      if prop is omitted, it prompts for it.
      if both prop and orig are omitted, it prompts for both.
      if both dest and destprop are omitted, it prompts for them.
)

( 
  $Log: cmd-mv-cp,v $
  Revision 1.3  2005/01/14 16:32:13  feaelin
  Broad sweep to clear up terminology usage in regards to database item/object/thing

  Revision 1.2  2001/01/22 05:27:01  feaelin
  Fixed the mv and cp library support.

)

  
$include $lib/strings
$include $lib/edit
$include $lib/match
$include $lib/glowstandard
  
lvar copy?

: cp-mv-prop ( d s d s -- i )
  4 pick me @ swap controls not if
    4 popn
    "You don't control the source." .tell 0 exit
  then
  over me @ swap controls not if
    4 popn
    "You don't control the destination." .tell 0 exit
  then
  me @ .arch? not if
    3 pick dup "@" 1 strncmp not swap "/@" instring or if
      4 popn
      "Source property: Permission denied." .tell 0 exit
    then
    dup dup "@" 1 strncmp not swap "/@" instring or if
      4 popn
      "Dest property: Permission denied." .tell 0 exit
    then
    me @ .wizard? not if
      dup dup "~" 1 strncmp not swap "/~" instring or if
        4 popn
        "Dest property: Permission denied." .tell 0 exit
      then
    then
  then
  4 pick 4 pick getpropstr
  dup if
    3 pick 3 pick rot 0 addprop
  else
    pop 4 pick 4 pick getpropval
    dup if
      3 pick 3 pick "" 4 rotate addprop
    else
      pop 4 pick 4 pick propdir? not if
        "I don't see what property to "
        copy? @ if "copy." else "move." then
        strcat .tell pop pop pop pop 0 exit
      then
    then
  then
  4 pick 4 pick propdir? if
    4 pick dup 5 pick "/" strcat nextprop
    (d s dd ds d ss)
    begin
      dup while
      over dup 3 pick nextprop
      4 rotate 4 rotate
      6 pick 6 pick "/" strcat
      3 pick dup "/" rinstr
      strcut swap pop strcat
      cp-mv-prop pop
    repeat
    pop pop
  then
  pop pop
  copy? @ not if remove_prop else pop pop then
  1
;
  
: strip-slashes ( s -- s' )
  begin
    dup while
    dup strlen 1 - strcut
    dup "/" strcmp if strcat exit then
    pop
  repeat
;

: cp-prop
  1 copy? ! cp-mv-prop
;

: mv-prop
  0 copy? ! cp-mv-prop
;
  
  
: parse-command ( s -- )
  "me" match dup me ! location loc !
  command @ tolower
  "command @ = \"" over strcat "\"" strcat .tell
  "c" instr copy? !
  
  dup "#help" stringcmp not if
    pop
    copy? @ if
      "cp orig=prop,dest=destprop"
      "  Copies prop from orig to dest, renaming it to destprop."
    else
      "mv orig=prop,dest=destprop"
      "  Moves prop from orig to dest, renaming it to destprop."
    then
    " "
    "  if orig is omitted, it assumes a property on the user."
    "  if dest is omitted, it assumes dest is the same as orig."
    "  if destprop is omitted, it assumes it is the same name as prop."
    "  if prop is omitted, it asks the user for it."
    "  if both prop and orig are omitted, it asks the user for both."
    "  if both dest and destprop are omitted, it asks the user for them."
    depth EDITdisplay exit
  then
  
  "," .split .strip swap .strip
  "=" .split .strip swap .strip
  dup if
    .noisy_match
    dup not if pop exit then
  else
    over not if
      "Please enter the name of the original database item."
      .tell pop read .strip
    then
    dup if
      .noisy_match
      dup not if pop exit then
    else pop me @
    then
  then
  -3 rotate
  begin
    strip-slashes
    dup not while
    "Please enter the name of the original property." .tell
    pop read .strip
  repeat
  swap
  "=" .split .strip strip-slashes swap .strip
  begin
    over over or not while
    pop pop
    "Please enter the name of the destination database item." .tell
    read .strip
    "Please enter the name of the destination property." .tell
    read .strip
    strip-slashes swap
  repeat
  dup if
    .noisy_match
    dup not if pop exit then
  else
    pop 3 pick
  then
  swap
  dup not if pop over then
  
  (origdbref origpropname destdbref destpropname)
  cp-mv-prop if
    copy? @ if "Property copied."
    else "Property moved."
    then .tell
  then
;

public cp-prop
public mv-prop
.
c
q
@register cmd-mv-cp=cmd/mv-cp
@register cmd-mv-cp=lib/mv-cp
@register #me cmd-mv-cp=tmp/prog1
@set $tmp/prog1=W3
@set $tmp/prog1=/_defs/copy-prop:"$lib/mv-cp" match "cp-prop" call
@set $tmp/prog1=/_defs/move-prop:"$lib/mv-cp" match "mv-prop" call
@action mv;cp=here=tmp/exit1
@link $tmp/exit1=$tmp/prog1
@set $tmp/exit1=D
@set $tmp/exit1=M1
@set $tmp/exit1=L
@set $tmp/exit1=/_/de:Permission denied.
@set $tmp/exit1=/_/fl:Permission denied.
@set $tmp/prog1=_version:FM$Revision: 1.3 $
@set $tmp/prog1=_lib-version:FM$Revision: 1.3 $
"Installation of cmd-mv-cp complete.
