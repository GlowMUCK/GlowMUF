wh me=Beginning installation of lib-strings...
@prog lib-strings
1 99999 d
1 i
( lib-strings: $Date: 2016/03/09 03:16:45 $ $Revision: 1.29 $                 )
( Purpose: Provides various string cleanup and parsing routines               )
( Author: Unknown                                                             )
( Contributors: Feaelin, Andy                                                 )
( Dependencies: None                                                          )
( --------------------------------------------------------------------------- )
( Where relevant, all of these functions should be glow-ansi-color code aware.)
(                                                                             )
( STR-command   [ string -- string ]                                          )
(     Converts any of these: "#help", "-help", "/help" to "help". If there is )
(     not a command character: "#", "-", or "/", it returns ""                )
( STR-parse     [ string -- string1 string2 string3                           )
(     Converts a typical command line string into its individual parts. For   )
(     Example: "page #fast foobar=A quick message!" is converted to:          )
(     "fast" "foobar" "A quick message!"                                      )
( STR-blank?    [ string -- boolean ]                                         )
(     Returns true if the string is empty, or if it contains only spaces and  )
(     glow-ansi-color codes. All these will return true: "", "  ", "^RED^".   )
( STR-null?     [ string -- boolean ]                                         )
(     Returns true if the string is empty.                                    )
( STR-sms       [ string -- boolean ]                                         )
(     Reduces multiple contiguous spaces to single spaces: "foo  bar   baz"   )
(     becomes "foo bar baz".                                                  )
( STR-countOccurence [ string1 string2 -- count ]                             )
(     Counts the number of times string2 appears in string1. If string2 is    )
(     the empty string, countOccurrence returns the length of string1.        )
( STR-split     [ string delimiter -- left-string right-string ]              )
(     Splits string into two strings at the first occurence of 'delimiter'.   )
(     "Foo#Bar#Baz" "#" STR-split yields: "Foo" "Bar#Baz"                     )
( STR-rsplit    [ string delimiter -- left-string right-string ]              )
(     Splits string into two strings at the last occurence of 'delimiter'.   )
(     "Foo#Bar#Baz" "#" STR-rsplit yields: "Foo#Bar" "Baz"                    )
( STR-splitargs [ string -- string string ]                                   )
(     Splits string into two strings at the first occurence of a space or an  )
(     equal sign. "foo=bar" or "foo bar" both would become "foo" "bar"        )
( STR-fillfield [ string character width -- pad-string ]                      )
(     Returns a string of with sufficient number of 'character' to pad the    )
(     original string to 'width' length. For example:                         )
(     "foo" "#" 5 STR-fillfield yields: "foo" "##".                           )
( STR-left      [ string width -- space-padded-string ]                       )
(     Adds spaces to 'string' until it is 'width' wide. "foo" 5 STR-left is   )
(     equivalent to: "foo" dup " " 5 STR-fillfield strcat, produces: "foo  "  )
( STR-center    [ string width -- centered-string ]                           )
(     Adds spaces to 'string' on both sides until it is centered in a string  )
(     'width' long. "foo" 7 STR-center produces: "  foo  "                    )
( STR-right     [ string width -- right-justified-string ]                    )
(     Adds spaces to the left side of 'string' until the string is 'width'    )
(     long. "foo" 5 STR-left is equivalent to:                                )
(     "foo" dup " " 5 STR-fillfield swap strcat, produces: "  foo"            )
( STR-asc       [ character -- integer ]                                      )
(     Returns the ASCII character code for 'character'.                       )
( STR-char      [ integer -- character ]                                      )
(     Converts 'integer' into its ASCII character equivalent.                 )
( STR-singlespace [ string -- string ]                                        )
(     Compacts pairs of space characters into one space character             )
(     "foo  bar" --> "foo bar"                                                )
( STR-capitalize [ string -- string ]                                         )
(     Capitalizes the first word in the string                                )
( STR-cleancommas [ string -- string ]                                        )
(     Under repair, check back later.                                         )
( The following routines are deprecated, do not use them.                     )
( STR-sls      [       str -- str'          ]  use 'striplead'                )
( STR-sts      [       str -- str'          ]  use 'striptail'                )
( STR-strip    [       str -- str'          ]  use 'strip'                    )
( --------------------------------------------------------------------------- )
(
  $Log: lib-strings,v $
  Revision 1.29  2016/03/09 03:16:45  feaelin
  Add new word 'STR-capitalize' to capitalize the first word of a string.

  Revision 1.28  2012/03/20 14:43:56  feaelin
  * Modified STR-parse to handle -cmd /cmd in addition to #cmd
  * Added STR-singlespace to the documentation

  Revision 1.27  2008/10/24 02:26:18  feaelin
  Added STR-countOccurrence

  Revision 1.26  2008/06/16 02:49:31  feaelin
  Rewrote documentation to be more comprehensible.
  
  Revision 1.25  2006/08/27 00:15:40  feaelin
  Corrected definition of STR-blank?. It now handles strings with glow-ansi
  codes in them correctly by stripping them first.
  
  Added STR-null? to parallel STR-blank?. STR-null? will only be true if the
  string is entirely empty.
  
  Revision 1.24  2006/08/02 13:25:08  feaelin
  Added STR-command...converts a string of '#help' or '/help' or '-help' to
  simply 'help'.
  
  Revision 1.23  2006/01/18 01:01:21  feaelin
  Whoops. Forgot to make cleancommas public.
 
  Revision 1.22  2005/09/26 16:18:53  feaelin
  Ported cleancommas from lib-glow-standard
 
  Revision 1.21  2005/09/25 13:07:10  feaelin
  Changelog update
 
  Revision 1.20  2005/04/07 21:08:58  feaelin
  Library Symbol added
 
  Revision 1.18  2005/04/05 15:31:20  feaelin
  Updated documentation in light of the new library word name standard
 
  Revision 1.17  2005/04/05 15:23:19  feaelin
  Provided more aliases of the library words
 
  Revision 1.16  2005/04/03 15:02:27  feaelin
  Simple whitespace changes.
 
  Revision 1.15  2005/04/03 14:55:01  feaelin
  Fixed installer script
 
  Revision 1.14  2005/03/21 01:31:43  feaelin
  General maintenance and documentation updates
 
  Revision 1.13  2004/08/06 14:12:22  feaelin
  Minor documentation corrections.
 
  Revision 1.12  2004/04/22 17:25:53  feaelin
  Documentation Cleanup
 
  Revision 1.11  2001/02/22 20:46:31  feaelin
  Documentation correction.
   
  Revision 1.10  2001/02/22 20:39:56  feaelin
  Added support to STRfillfield, STRcenter STRleft, STRright to detect
  and handle correctly strings with ANSI codes in them.  Credit goes to
  Syvel for the original concept for this correction.
  
  Revision 1.8  1999/02/13 19:06:17  feaelin
  Fixed .split2 entry
  
  Revision 1.6  1998/07/30 19:20:41  feaelin
  Added synonyms of .split: .splitarg, .splitargs, .splitfirst, .strcutat.
  
  Revision 1.4  1998/07/30 19:14:48  feaelin
  Added STRsplitargs/.splitargs
  
  Revision 1.3  1998/07/30 04:11:20  feaelin
  Updated STRsplit
  
  Revision 1.2  1998/07/28 03:35:38  feaelin
  Corrected wiz-level.
)  
( --------------------------------------------------------------------------- )
: cleancommas ( s -- s )
  dup not if exit then
  dup strlen 1 - over ", " rinstr = if dup strlen 2 - strcut pop then
  dup strlen over "," rinstr = if dup strlen 1 - strcut pop then
  dup " " 1 strncmp not if 1 strcut swap pop then
  dup ", " rinstr dup if
     over swap 1 - strcut pop ", " rinstr if
  dup ", " rinstr strcut " and" swap strcat strcat
  else " and " ", " subst then else pop then
;
 
: split ( s si -- s s )
   over over instr dup if
      rot swap 1 - strcut rot strlen strcut swap pop
   else pop pop "" then
;
 
: splitargs ( s -- s s )
  dup " " instr if
    dup "=" instr if
      dup " " instr over "=" instr - 0 < if
        " " split
      else "=" split then
    else " " split then
  else "=" split then
;
 
: rsplit
    swap over over swap
    rinstr dup not if
        pop swap pop ""
    else
        1 - strcut rot
        strlen strcut
        swap pop
    then
;
 
: sms ( str -- str')
    dup "  " instr if
        " " "  " subst 'sms jmp
    then
;
 
: fillfield (str padchar fieldwidth -- padstr)
  rot ansi_strlen - dup 1 < if pop pop "" exit then
  swap over begin swap dup strcat swap 2 / dup not until pop
  swap ansi_strcut pop
;
 
: left (str fieldwidth -- str')
  over " " rot fillfield strcat
;
 
: right (str fieldwidth -- str')
  over " " rot fillfield swap strcat
;
 
: center (str fieldwidth -- str')
  over " " rot fillfield
  dup ansi_strlen 2 / ansi_strcut
  rot swap strcat strcat
;
 
: STRasc ( c -- i )
    " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    "[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~" strcat
    swap
    dup not if
	and exit
    then
    instr dup if
        31 +
    then
;
 
: STRchr ( i -- c )
    dup 31 > over 128 < and if
        " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        "[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~" strcat
        swap 32 - strcut swap pop 1 strcut pop
    else
        pop "."
    then
;
 
: STR-capitalize ( string --> string )
  1 strcut swap toupper swap strcat
; public STR-capitalize
 
: STR-countOccurrence ( s s -- i )
  dup "" strcmp if
    dup strlen -3 rotate ( s2len s1 s2 )
    over strlen -3 rotate ( s2len s1len s1 s2 )
    "" swap subst strlen ( s2len s1len s1cutlen )
    - swap /
  else
    "STR-countOccurrence cannot count empty strings." abort
  then
; public STR-countOccurrence
 
: STR-command ( s -- s )
  dup
  "#" 1 strncmp
  over "-" 1 strncmp and
  over "/" 1 strncmp and
  if
    pop "" 
  then
  1 strcut swap pop
; public STR-command
 
: STRparse ( s -- s1 s2 s3 )
  (
    Before: " #option  tom dick  harry = message "
    After:  "option" "tom dick harry" " message "
  )
  "=" rsplit swap
  striplead dup
  "#" 1 strncmp not over "-" 1 strncmp not or over "/" 1 strncmp not or if
    1 strcut swap pop
    " " split
  else
    "" swap
  then
  strip sms rot
;
 
public split
public rsplit
public sms
public fillfield
public left
public right
public center
public STRasc
public STRchr
public STRparse
public splitargs
public cleancommas
.
c
q
@register lib-strings=lib/strings
@set $lib/strings=L
@set $lib/strings=W
@set $lib/strings=/_defs/.asc:"$lib/strings" match "STRasc" call
@set $lib/strings=/_defs/.blank?:ansi_strip striplead "" strcmp not
@set $lib/strings=/_defs/.center:"$lib/strings" match "center" call
@set $lib/strings=/_defs/.chr:"$lib/strings" match "STRchr" call
@set $lib/strings=/_defs/.command_parse:"$lib/strings" match "STRparse" call
@set $lib/strings=/_defs/.fillfield:"$lib/strings" match "fillfield" call
@set $lib/strings=/_defs/.left:"$lib/strings" match "left" call
@set $lib/strings=/_defs/.right:"$lib/strings" match "right" call
@set $lib/strings=/_defs/.rsplit:"$lib/strings" match "rsplit" call
@set $lib/strings=/_defs/.singlespace:"$lib/strings" match "sms" call
@set $lib/strings=/_defs/.sms:"$lib/strings" match "sms" call
@set $lib/strings=/_defs/.split:"$lib/strings" match "split" call
@set $lib/strings=/_defs/.split2:"$lib/strings" match "split" call
@set $lib/strings=/_defs/.splitarg:"$lib/strings" match "splitargs" call
@set $lib/strings=/_defs/.splitargs:"$lib/strings" match "splitargs" call
@set $lib/strings=/_defs/.splitfirst:"$lib/strings" match "splitargs" call
@set $lib/strings=/_defs/.stripspaces:strip
@set $lib/strings=/_defs/.strcutat:"$lib/strings" match "splitargs" call
@set $lib/strings=/_defs/STRasc:"$lib/strings" match "STRasc" call
@set $lib/strings=/_defs/STRblank?:ansi_strip striplead "" strcmp not
@set $lib/strings=/_defs/STRcenter:"$lib/strings" match "center" call
@set $lib/strings=/_defs/STRchr:"$lib/strings" match "STRchr" call
@set $lib/strings=/_defs/STRfillfield:"$lib/strings" match "fillfield" call
@set $lib/strings=/_defs/STRleft:"$lib/strings" match "left" call
@set $lib/strings=/_defs/STRparse:"$lib/strings" match "STRparse" call
@set $lib/strings=/_defs/STRright:"$lib/strings" match "right" call
@set $lib/strings=/_defs/STRrsplit:"$lib/strings" match "rsplit" call
@set $lib/strings=/_defs/STRsinglespace:"$lib/strings" match "sms" call
@set $lib/strings=/_defs/STRsls:striplead
@set $lib/strings=/_defs/STRsms:"$lib/strings" match "sms" call
@set $lib/strings=/_defs/STRsplit:"$lib/strings" match "split" call
@set $lib/strings=/_defs/STRsplitargs:"$lib/strings" match "splitargs" call
@set $lib/strings=/_defs/STRstrip:strip
@set $lib/strings=/_defs/STRsts:striptail
@set $lib/strings=/_defs/STR-asc:"$lib/strings" match "STRasc" call
@set $lib/strings=/_defs/STR-blank?:ansi_strip striplead "" strcmp not
@set $lib/strings=/_defs/STR-null?:"" strcmp not
@set $lib/strings=/_defs/STR-capitalize:"$lib/strings" match "STR-capitalize" call
@set $lib/strings=/_defs/STR-center:"$lib/strings" match "center" call
@set $lib/strings=/_defs/STR-chr:"$lib/strings" match "STRchr" call
@set $lib/strings=/_defs/STR-cleancommas:"$lib/strings" match "cleancommas" call
@set $lib/strings=/_defs/STR-command:"$lib/strings" match "STR-command" call
@set $lib/strings=/_defs/STR-countOccurrence:"$lib/strings" match "STR-countOccurrence" call
@set $lib/strings=/_defs/STR-fillfield:"$lib/strings" match "fillfield" call
@set $lib/strings=/_defs/STR-left:"$lib/strings" match "left" call
@set $lib/strings=/_defs/STR-parse:"$lib/strings" match "STRparse" call
@set $lib/strings=/_defs/STR-right:"$lib/strings" match "right" call
@set $lib/strings=/_defs/STR-rsplit:"$lib/strings" match "rsplit" call
@set $lib/strings=/_defs/STR-singlespace:"$lib/strings" match "sms" call
@set $lib/strings=/_defs/STR-sls:striplead
@set $lib/strings=/_defs/STR-sms:"$lib/strings" match "sms" call
@set $lib/strings=/_defs/STR-split:"$lib/strings" match "split" call
@set $lib/strings=/_defs/STR-splitargs:"$lib/strings" match "splitargs" call
@set $lib/strings=/_defs/STR-strip:strip
@set $lib/strings=/_defs/STR-sts:striptail
@set $lib/strings=/_docs:@list $lib/strings=1-60
@set $lib/strings=/_/de:lib-strings: List lines 1-60 for documentation.
@set $lib/strings=/_lib-version:FM$Revision: 1.29 $
@set $lib/strings=/_version:
@set $lib/strings=/_lib-symbol:STR
wh me=Installation of lib-strings complete.
