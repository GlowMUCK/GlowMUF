wh me=Beginning installation of look-show-exits
@prog look-show-exits
1 99999 d
1 i
( look-show-exits: $Date: 2006/07/19 03:01:47 $ $Revision: 1.7 $              )
( Purpose: To display exits in a given room when called by lib-look           )
( Author: Feaelin Moilar AKA Iain E. Davis                                    )
( Contributors:                                                               )
( Dependencies: lib-wordwrap, lib-edit                                        )
( --------------------------------------------------------------------------- )
( Obvious exits lister. Intended for use with lib-look, but will work as an   )
( @succ if preferred. Lists all not-dark exits not regarded as actions.       )
( Actions are any exit that is not linked to a room. To force an action to be )
( displayed, you can @set <action>=_action?:yes                               )
( To force all actions in a given room or area, @set <room>=_showactions?:yes )
( A wrapping point can be set either on the program or in the environment by: )
( @set <program>=_wrap:78, or @set <room>=_wrap:78, etc.                      )
( To change the prefix on the exit list, @set <program>=_prefix:You can go:...)
( This string can contain glow color codes.                                   )
( Additional color customizations can be made:                                )
( @set <program or environment room>=_show-exit-color-1: for the exit name    )
( @set <program or environment>=_show-exit-color-2: bracket color             )
( @set <program or environment>=_show-exit-color-3: dir letter color          )
( --------------------------------------------------------------------------- )
( If you want to instead use a signpost, you can set the following properties )
( @set <room>=_Signpost:yes ...to turn on the signpost                        )
( @set <room>=_north:Description to set what the sign says pointing north     )
( @set <room>=_south (and so on, for each direction you want represented any  )
( of the following: north, northeast, east, southeast, south, southwest, west,)
( and northwest.                                                              )
( --------------------------------------------------------------------------- )
( If you or a player wants to have more detailed exit information, they may   )
( @set me=_BigExit:yes or @set <room or environment>=_BigExit:yes, and they   )
( will exit strings such as:                                                  )
( South Lawn <S> to South Lawn                                                )
( --------------------------------------------------------------------------- )
(
  TBD: Help, and interface for player to set big exit?
)
(
  $Log: look-show-exits,v $
  Revision 1.7  2006/07/19 03:01:47  feaelin
  Updated documentation.
  Added check for dark rooms.

  Revision 1.6  2006/07/19 02:56:29  feaelin
  Added support for extended/big exit information.
 
  Revision 1.5  2006/07/18 21:03:08  feaelin
  Added in the signpost code and customizations.
 
  Revision 1.4  2006/07/18 03:07:11  feaelin
  Added color-customization.
 
  Revision 1.3  2006/07/17 20:38:30  feaelin
  Added support for the _action? property to force an action to be shown.
  Added support for the _showactions? property force actions to be shown.
  Added support for the wrap point to be settable in the environment.
  Added support for legacy [deprecated] properties.
  
  Revision 1.2  2006/07/17 19:37:30  feaelin
  Added exit darking and fixed my testing shim so it isn't there anymore.
  
  Revision 1.1  2006/07/17 19:23:56  feaelin
  Initial code. Basic exit showing fully implemented.
)

$include $lib/strings
$include $lib/wordwrap
$include $lib/edit

( Crossroads lifted from Andy's old version of show-exits ) 
: gname ( sp -- sn i ) 
   trigger @ swap getpropstr dup strlen dup 14 < and 
;
: doubleloop 1 - swap over strcut " " swap strcat strcat swap
  dup 1 > if doubleloop else pop then 
;
: double dup strlen dup if doubleloop else pop then ;
: addspaces "         " swap strcut pop swap over strcat strcat ;
: stretch ( s -- s ) double dup strlen 2 / 12 swap - addspaces ; 
: top  me @ "^BLUE^                   _" ansi_notify ;
: topr me @ "^BLUE^     _____________|_|____________" ansi_notify ;
: botr me @ "^BLUE^     ~~~~~~~~~~~~~|~|~~~~~~~~~~~~" ansi_notify ;
: topl me @ "^BLUE^      ____________|_|_____________" ansi_notify ;
: botl me @ "^BLUE^      ~~~~~~~~~~~~|~|~~~~~~~~~~~~~" ansi_notify ;
: bare me @ "^BLUE^                  | |" ansi_notify ;
: grass me @ "^GREEN^|||||||||||||||||||||||||||||||||||||||" ansi_notify ;
: dop ( sn sb se -- )
  rot stretch "^WHITE^^BBLUE^" swap strcat "^RESET^" strcat
  swap strcat strcat me @ swap ansi_notify 
;
:  pn "     ^BLUE^^BBLUE^> ^RESET^" "^BLUE^^BBLUE^ >^RESET^ ^WHITE^N" dop ;
:  pe "     ^BLUE^^BBLUE^> ^RESET^" "^BLUE^^BBLUE^ >^RESET^ ^WHITE^E" dop ;
: pne "     ^BLUE^^BBLUE^> ^RESET^" "^BLUE^^BBLUE^ >^RESET^ ^WHITE^NE" dop ;
: pse "     ^BLUE^^BBLUE^> ^RESET^" "^BLUE^^BBLUE^ >^RESET^ ^WHITE^SE" dop ;
:  ps "   ^WHITE^S ^BLUE^^BBLUE^< " "^BLUE^^BBLUE^ <" dop ;
:  pw "   ^WHITE^W ^BLUE^^BBLUE^< " "^BLUE^^BBLUE^ <" dop ;
: pnw "  ^WHITE^NW ^BLUE^^BBLUE^< " "^BLUE^^BBLUE^ <" dop ;
: psw "  ^WHITE^SW ^BLUE^^BBLUE^< " "^BLUE^^BBLUE^ <" dop ;
: crossroads top
  "_north" gname if topr pn botr else pop then
  "_northeast" gname if topr pne botr else pop then
  "_east" gname if topr pe botr else pop then
  "_southeast" gname if topr pse botr else pop then
  "_south" gname if topl ps botl else pop then
  "_southwest" gname if topl psw botl else pop then
  "_west" gname if topl pw botl else pop then
  "_northwest" gname if topl pnw botl else pop then
   bare bare bare grass	
;
 ( End of Crossroads lifted code )

( Sets up either the configured prefix or the default string ) 
: get-prefix ( -- s )
  prog "_prefix" getpropstr dup "" strcmp not if
    pop "^CYAN^You can go: "
  then
;
 
( fetch custom color if available )
: get-color-1
  prog "_show-exit-color-1" getpropstr
  dup "" strcmp if exit then
  pop
  trigger @ "_show-exit-color-1" envpropstr
  swap pop dup "" strcmp if exit then
  pop
  "^AQUA^"
;
 
( fetch custom color if available )
: get-color-2
  prog "_show-exit-color-2" getpropstr
  dup "" strcmp if exit then
  pop
  trigger @ "_show-exit-color-2" envpropstr
  swap pop dup "" strcmp if exit then
  pop
  "^BROWN^"
;
 
( fetch custom color if available )
: get-color-3
  prog "_show-exit-color-3" getpropstr
  dup "" strcmp if exit then
  pop
  trigger @ "_show-exit-color-3" envpropstr
  swap pop dup "" strcmp if exit then
  pop
  "^YELLOW^"
;
 
( fetch custom color if available )
: get-color-4
  prog "_show-exit-color-4" getpropstr
  dup "" strcmp if exit then
  pop
  trigger @ "_show-exit-color-4" envpropstr
  swap pop dup "" strcmp if exit then
  pop
  "^CYAN^"
;
 
( Substitutions to prettify the output )
: do-substitutions ( s -- s )
  "^COLOR-2^<^COLOR-3^" "<" subst
  "^COLOR-2^>" ">" subst
  "^COLOR-2^(^COLOR-3^" "(" subst
  "^COLOR-2^)" ")" subst
  "^COLOR-2^[^COLOR-3^" "[" subst
  "^COLOR-2^]" "]" subst
  "^COLOR-2^{^COLOR-3^" "{" subst
  "^COLOR-2^}" "}" subst
  get-color-2 "^COLOR-2^" subst
  get-color-3 "^COLOR-3^" subst
;
 
: get-prefix-len ( -- i )
  get-prefix ansi_strlen
;
 
( What is our wrap point? )
: get-wrap-length ( -- i )
  prog "_wrap" getprop dup string? if atoi then
  dup 0 = not if exit then
  pop
  trigger @ "_wrap" envprop swap pop dup string? if atoi then
  dup 0 = not if exit then
  pop
  prog "contents/width" getprop dup string? if atoi then
  dup 0 = not if exit then
  pop
  trigger @ "contents/width" envprop swap pop dup string? if atoi then
  dup 0 = if
    pop 78
  then
;
 
( check an action/exit for either being an exit or being ok )
: action_ok? ( d -- i )
  dup getlink room? if pop 1 exit then
  dup "_action?" getpropstr "y" instr if pop 1 exit then
  "_showactions?" envpropstr swap pop "y" instr
;
 
: show_exit? ( d -- i )
  dup ok? if ( Must be a valid database item )
    dup exit? if ( Must be an exit )
      dup action_ok? if ( Our test to see if it is an action )
        dup "DARK" flag? not me @ "mage" flag? or if ( if not dark or I'm wiz )
          pop 1 exit
        else
          pop 0 exit
        then
      else
        pop 0 exit
      then
    else
      pop 0 exit
    then
  else
    pop 0 exit
  then
;
 
: show-exits ( -- )
  get-prefix
  ( This shouldn't happen, but just in case )
  trigger @ room? not if
    exit
  then
  0 trigger @ exits
  dup ok? if 
    begin
      dup show_exit? if
        swap 1 + 
        dup 1 > if
          3 pick ", " strcat 3 put
        then
        swap
        ( We want only the first name )
        dup name ";" explode over over 2 + 0 swap - rotate popn
        get-color-1 swap strcat
        do-substitutions
        4 rotate swap strcat -3 rotate
      then
      next
    dup ok? not until
    pop
  else
    pop
  then
  0 = if
   pop me @ "^CYAN^You see no obvious way out." ansi_notify
  else
    get-wrap-length swap WRAP-wordwrap
    swap me @ swap ansi_notify
    1 - dup 0 = not if
      begin
        swap
        "" " " get-prefix-len STRfillfield swap strcat
        me @ swap ansi_notify
      1 - dup 0 = until
    then
  then
;
 
: show-extended-exits ( -- )
  ( This shouldn't happen, but just in case )
  trigger @ room? not if
    exit
  then
  me @ get-prefix ansi_notify
  0 trigger @ exits
  dup ok? if 
    begin
      dup show_exit? if
        swap 1 + swap
        ( We want only the first name )
        dup name ";" explode over over 2 + 0 swap - rotate popn
        get-color-1 swap strcat
        do-substitutions
        "    " swap strcat " to " strcat get-color-4 strcat
        over getlink
        dup "DARK" flag? me @ "MAGE" flag? not and if
          pop "Unknown"
        else
          name
        then
        strcat
        me @ swap ansi_notify
      then
      next
    dup ok? not until
    pop
  else
    pop
  then
  0 = if
    pop me @ "^CYAN^You see no obvious way out." ansi_notify
  then
;
 
: main ( s -- )
  ( I know this is pointless. Its here just in case I need it later )
  dup "(Look)" strcmp not if ( If called by lib-look, pop, if not, pop )
    pop
  else
    pop
  then
  trigger @ "DARK" flag? if
    me @ trigger @ controls not if
      exit
    then
  then 
  trigger @ "_SignPost" getpropstr "y" instr if
    crossroads exit
  then
  me @ "_BigExits" getpropstr "y" instr if
    show-extended-exits exit
  then
  trigger @ "_BigExits" envpropstr swap pop "y" instr if
    show-extended-exits exit
  then
  show-exits
;
.
c
q
@register look-show-exits=look/show-exits
@set $look/show-exits=/_docs:@list $look/show-exits=1-32
@set $look/show-exits=/_version:FM$Revision: 1.7 $
wh me=Installation of look-show-exits complete.
