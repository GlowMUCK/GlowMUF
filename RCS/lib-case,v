head	1.7;
access;
symbols
	GlowMUF1-1-1:1.7
	GlowMUF102:1.5;
locks; strict;
comment	@# @;


1.7
date	2005.04.05.13.41.15;	author feaelin;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.21.01.31.42;	author feaelin;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.23.16.04.38;	author feaelin;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.11.15.10.47;	author feaelin;	state Exp;
branches;
next	1.3;

1.3
date	99.02.13.16.35.17;	author feaelin;	state Exp;
branches;
next	1.2;

1.2
date	99.02.13.16.33.02;	author feaelin;	state Exp;
branches;
next	1.1;

1.1
date	98.08.23.16.27.17;	author glow;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Installer update, documentation cleanup
@
text
@wh me=Beginning installation of lib-case...
@@prog lib-case
1 99999 d
1 i
( lib-case: $Date: 2005/03/21 01:31:42 $ $Revision: 1.6 $                     )
( Purpose: Provides select...case / switch type functionality to MUF          )
( Authors: Foxen, Fringe                                                      )
( Contributors: None                                                          )
( Dependencies: None                                                          )
( --------------------------------------------------------------------------- )
( Okay, here's an evil idea for you programmers:                              )
( Fringe came up with a truly demented way to get case statements using just  )
( $defines, so we made it into a library.  The library basically makes the    )
( following defines:                                                          )
( --------                                                                    )
( $define case    begin dup       $enddef                                     )
( $define when    if pop          $enddef                                     )
( $define end     break then dup  $enddef                                     )
( $define default pop 1 if        $enddef                                     )
( $define endcase pop pop 1 until $enddef                                     )
( --------                                                                    )
( And what it lets you do is something like this:                             )
( --------                                                                    )
( $include $lib/case                                                          )
( <data> case                                                                 )
(   <test> when <effect> end                                                  )
(   <test> when <effect> end                                                  )
(   <test> when <effect> end                                                  )
(   <test> when <effect> end                                                  )
(   default <otherwise>  end                                                  )
( endcase                                                                     )
( --------                                                                    )
(  This will compile to the following:                                        )
( --------                                                                    )
( <data> begin                                                                )
(   dup <test> if pop <effect> break then                                     )
(   dup <test> if pop <effect> break then                                     )
(   dup <test> if pop <effect> break then                                     )
(   dup <test> if pop <effect> break then                                     )
(   dup pop 1  if <otherwise>  break then                                     )
(   dup pop pop                                                               )
( 1 until                                                                     )
( --------                                                                    )
( The default clause is optional and thats why the wierd 'dup pop pop' is at  )
( the end.  The <otherwise> clause is passed the value that failed to match in)
( any of the tests.  The <tests> can be as complex as you wish, and so can the)
( <effect> and <otherwise> statements. Here's an example using real code:     )
( --------                                                                    )
( read case                                                                   )
(   "#help" over stringcmp not swap "#h" stringcmp not or when do-help end    )
(   "#help2" over stringcmp not swap "#h2" stringcmp not or when do-help2 end )
(   "#list" stringcmp not when do-list end                                    )
(   default pop give-error end                                                )
( endcase                                                                     )
( --------                                                                    )
(  Enjoy!                                                                     )
(          - Foxen                                                            )
( --------------------------------------------------------------------------- )
(
  $Log: lib-case,v $
  Revision 1.6  2005/03/21 01:31:42  feaelin
  General maintenance and documentation updates

  Revision 1.5  2001/02/23 16:04:38  feaelin
  Fixed Link_OK setting

  Revision 1.4  2000/02/11 15:10:47  feaelin
  Wasn't properly set link_ok.

  Revision 1.3  1999/02/13 16:35:17  feaelin
  Make that two.

  Revision 1.2  1999/02/13 16:33:02  feaelin
  Ooops. missing paren.
)
: main "" pop ;
.
c
q
@@register lib-case=lib/case
@@set $lib/case=L
@@set $lib/case=/_/de:lib-case: List lines 1-54 for documentation.
@@set $lib/case=/_defs/case:begin dup
@@set $lib/case=/_defs/default:pop 1 if
@@set $lib/case=/_defs/end:break then dup
@@set $lib/case=/_defs/endcase:pop pop 1 until
@@set $lib/case=/_defs/when:if pop
@@set $lib/case=/_docs:@@list $lib/case=1-54
@@set $lib/case=/_lib-version:FM$Revision: 1.6 $
wh me=Installation of lib-case completed.
@


1.6
log
@General maintenance and documentation updates
@
text
@d1 1
a1 1
"Beginning installation of lib-case...
d5 5
a9 2
( lib-case: $Date: 2001/02/23 16:04:38 $ $Revision: 1.5 $
  Originally from FuzzBall MUF distribution                                   )
d11 47
a57 48
(  Okay, here's an evil idea for you programmers:
  Fringe came up with a truly demented way to get case statements using just
  $defines, so we made it into a library.  The library basically makes the
  following defines:
  --------
  $define case    begin dup       $enddef
  $define when    if pop          $enddef
  $define end     break then dup  $enddef
  $define default pop 1 if        $enddef
  $define endcase pop pop 1 until $enddef
  --------
  And what it lets you do is something like this:
  --------
  $include $lib/case
  <data> case
    <test> when <effect> end
    <test> when <effect> end
    <test> when <effect> end
    <test> when <effect> end
    default <otherwise>  end
  endcase
  --------
  This will compile to the following:
  --------
  <data> begin
    dup <test> if pop <effect> break then
    dup <test> if pop <effect> break then
    dup <test> if pop <effect> break then
    dup <test> if pop <effect> break then
    dup pop 1  if <otherwise>  break then
    dup pop pop
  1 until
  --------
  The default clause is optional and thats why the wierd 'dup pop pop' is at
  the end.  The <otherwise> clause is passed the value that failed to match in
  any of the tests.  The <tests> can be as complex as you wish, and so can the
  <effect> and <otherwise> statements. Here's an example using real code:
  --------
  read case
    "#help" over stringcmp not swap "#h" stringcmp not or when do-help end
    "#help2" over stringcmp not swap "#h2" stringcmp not or when do-help2 end
    "#list" stringcmp not when do-list end
    default pop give-error end
  endcase
  --------
  Enjoy!
          - Foxen
)
d61 3
d81 10
a90 11
@@register #me lib-case=tmp/prog1
@@set $tmp/prog1=L
@@set $tmp/prog1=/_/de:lib-case: List lines 1-50 for documentation.
@@set $tmp/prog1=/_defs/case:begin dup
@@set $tmp/prog1=/_defs/default:pop 1 if
@@set $tmp/prog1=/_defs/end:break then dup
@@set $tmp/prog1=/_defs/endcase:pop pop 1 until
@@set $tmp/prog1=/_defs/when:if pop
@@set $tmp/prog1=/_docs:@@list $lib/case=1-50
@@set $tmp/prog1=/_lib-version:FM$Revision: 1.5 $
"Installation of lib-case completed.
@


1.5
log
@Fixed Link_OK setting
@
text
@d5 1
a5 1
( lib-case: $Date: 2000/02/11 15:10:47 $ $Revision: 1.4 $
d59 3
a69 4

  Revision 1.1  1998/08/23 16:27:17  glow
  Initial revision

d85 1
a85 1
@@set $tmp/prog1=/_lib-version:FM$Revision: 1.4 $
@


1.4
log
@Wasn't properly set link_ok.
@
text
@d5 1
a5 1
( lib-case: $Date: 1999/02/13 16:35:17 $ $Revision: 1.3 $
d59 3
d78 1
a78 1
@@set $mp/prog1=L
d86 1
a86 1
@@set $tmp/prog1=/_lib-version:FM$Revision: 1.3 $
@


1.3
log
@Make that two.
@
text
@d5 1
a5 1
( lib-case: $Date: 1999/02/13 16:33:02 $ $Revision: 1.2 $
d59 3
d75 1
d83 1
a83 1
@@set $tmp/prog1=/_lib-version:FM$Revision: 1.2 $
@


1.2
log
@Ooops. missing paren.
@
text
@d5 2
a6 2
( lib-case: $Date: 1998/08/23 16:27:17 $ $Revision: 1.1 $
  Originally from FuzzBall MUF distribution
d59 3
d79 1
a79 1
@@set $tmp/prog1=/_lib-version:FM$Revision: 1.1 $
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
( lib-case: $Date$ $Revision$
d8 1
a8 1
  Okay, here's an evil idea for you programmers:
d58 4
a61 1
  $Log$
d76 2
a77 2
@@set $tmp/prog1=/_lib-version:FM$Revision$
"Installation of lib-case completed.@
