wh me=Begining installation of lib-match...
@prog lib-match
1 99999 d
1 i
( lib-match: $Date: 2008/06/17 13:08:10 $ $Revision: 1.19 $                   )
( Purpose: Provides various words to match a string to a database item's dbref)
( Author: Unknown                                                             )
( Contributors: Feaelin                                                       )
( Dependencies: None                                                          )
( --------------------------------------------------------------------------- )
( Matching library MATCH                                                      )
( MATCH-pmatch: playername -- playerdbref                                     )
(   Takes a string with a possible player name in it. It returns the dbref of )
(   that player, if it can find it. Returns #-1 if it cannot.                 )
(                                                                             )
( MATCH-noisy_match: itemname -- itemdbref                                    )
(   Takes a string with a possible item name in it. It returns the dbref of   )
(   the database item is if is found. If it is not found, it tells the user   )
(   that it doesn't see that here and returns #-1. If it finds several matches)
(   it tells the user that it doesn't know which item was meant, and returns  )
(   #-2.                                                                      )
(                                                                             )
( MATCH-noisy_pmatch: playername -- playerdbref                               )
(   This routine takes a string with a possible playername and returns the    )
(   dbref of that player, if it can find it. If it cannot find the player,    )
(   then it tells the user that it doesn't know who that is, and it returns   )
(   #-1.                                                                      )
(                                                                             )
( MATCH-noisy_plmatch: dbref itemname -- itemdbref                            )
(   Identical to MATCH-noisy_pmatch, except restricts matching to players     )
(   local to the triggering player, e.g., in the same room.                   )
(                                                                             )
( MATCH-noisy_rmatch: dbref itemname -- itemdbref                             )
(   Searches dbref for "itemname" and returns matching dbref if found. If it  )
(   is not found, it tells the user that it doesn't see that here and returns )
(   #-1. If it finds several matches it tells the user that it doesn't know   )
(   which item was meant, and returns #-2.                                    )
(                                                                             )
( MATCH-match_controlled: itemname -- itemdbref                               )
(   This routine basically does a noisy_match, and checks that what is        )
(   returned is controlled by the user. If it is not, then it tells the user  )
(   Permission Denied, and returns #-1. Otherwise it returns the dbref of the )
(   item matched.                                                             )
(                                                                             )
( MATCH-multi_rmatch: objref smatchstr -- dn .. d1 n                          )
(   This function takes a dbref for the thing/player/room that it is to match )
(   in, and a smatch style comparison string and returns the dbrefs of all the)
(   contained database items within who's names matched the string. There is  )
(   an integer on top giving how many dbrefs were returned. If no items were  )
(   matched, it only returns a 0.                                             )
(                                                                             )
( MATCH-table_match: xnone xambig sn xn .. s1 x1 n comp func -- smat xmat     )
(   This function takes, in order:                                            )
(     - a data value of any type to return if no matches are made. {xnone}    )
(     - a data value of any type to return if the match is amiguous. {xambig} )
(     - a range of comparator {sn - s1}, and data {xn - x1} pairs of any type.)
(     - an integer count of how many comparator-data pairs are on the stack to)
(       be compared against. {n}                                              )
(     - a value of the same type as the comparators, that will be checked     )
(       against each comparator. {comp}                                       )
(     - the address of the comparator function that is used to compare comp   )
(       against s1 through sn. This function should take the for a            )
(       non-match. {func}                                                     )
(   This function tests comp against s1 through sn, returning the matching    )
(   compatator-data pair if it finds one match. It returns a null string and  )
(   xnone if no matches are found. It returns a null string and xambig if more)
(   than one match was found.                                                 )
(                                                                             )
( MATCH-std_table_match:                                                      )
(   This function runs .table_match with a standard comparator fuction that   )
(   expects the comparators to be strings. The match comparator routine       )
(   matches if comp matches the beginning of the comparator exactly. Example: )
(   a comp of "#h" would match a comparator {s1 - sn} of "#help".             )
( --------------------------------------------------------------------------- )
( 
  $Log: lib-match,v $
  Revision 1.19  2008/06/17 13:08:10  feaelin
  noisy_plmatch was matching more than just players. Corrected.

  Revision 1.18  2008/06/14 16:40:55  feaelin
  Fixed bug in noisy_pmatch where passing a string like "*joeplayer" would not
  work as expected.

  Add noisy_plmatch.

  Revision 1.17  2008/06/14 04:48:01  feaelin
  Colorized error messages for noisy matches.
  Added MATCH-noisy_rmatch
 
  Revision 1.16  2005/09/25 13:46:29  feaelin
  Documentation update.
 
  Revision 1.15  2005/09/13 15:01:34  feaelin
  Updated documentation strings.
 
  Revision 1.14  2005/04/07 21:20:00  feaelin
  Added Library Symbols
 
  Revision 1.13  2005/04/06 04:10:57  feaelin
  Added some colorization.
 
  Revision 1.12  2005/04/05 21:08:02  feaelin
  Removed unneeded $include of lib-stackrng
 
  Revision 1.11  2005/04/04 16:11:50  feaelin
  Documentation Update
 
  Revision 1.10  2005/04/04 15:14:30  feaelin
  Forgot the _defs entry for pmatch.
 
  Revision 1.9  2005/04/04 15:05:26  feaelin
  Moved pmatch to this library from lib-glow-standard
  Revised noisy_pmatch to use the local word
  Updated Documentation and installer script
 
  Revision 1.8  2005/03/23 17:25:08  feaelin
  Updated documentation strings.
 
  Revision 1.7  2005/03/21 01:31:43  feaelin
  General maintenance and documentation updates
 
  Revision 1.6  2005/01/14 16:32:13  feaelin
  Broad sweep to clear up terminology usage in regards to database
  item/object/thing
 
  Revision 1.5  2004/08/04 14:12:21  feaelin
  Updated header documentation. Updated library entries to add the new
  LIBNAMEfuncname format for function names.
 
  Revision 1.4  2000/01/10 21:23:33  feaelin
  Fixed .controls backward compatibility
 
  Revision 1.3  1998/08/22 19:03:51  feaelin
  Oops. Remembered why I had already taken .controls out of lib-match.
 
  Revision 1.2  1998/08/22 18:57:08  feaelin
  Added .controls from fbmuf.
)
( --------------------------------------------------------------------------- )
 
: noisy_match (s -- d)
  dup if match else pop #-1 then
  dup not if
    me @ "^FAIL^I don't see that here!" ansi_notify exit
  then
  dup #-2 dbcmp if
    me @ "^FAIL^I don't know which one you mean!" ansi_notify exit
  then
;
 
: noisy_rmatch (d s -- d)
  dup if
    rmatch 
  else
    pop pop #-1 me @ "^FAIL^I don't see that here!" ansi_notify exit
  then
  dup #-1 dbcmp if
    me @ "^FAIL^I don't see that here!" ansi_notify exit
  then
  dup #-2 dbcmp if
    me @ "^FAIL^I don't know which one you mean!" ansi_notify exit
  then
;
 
: pmatch ( d -- s )
  tolower dup "me" strcmp not if
    match exit
  then
  "*" swap strcat
  "*" "**" subst match
; PUBLIC pmatch
 
: noisy_pmatch ( s -- d )
  pmatch dup not if
    me @ "^FAIL^I don't recognize anyone by that name." ansi_notify
  then
;
 
: noisy_plmatch ( s -- d )
  noisy_pmatch
  dup location me @ location dbcmp if
    exit
  then
  pop #-1 
  me @ "^FAIL^I don't see them here." ansi_notify
;
 
: match_controlled (s -- d)
  noisy_match dup ok? if
    me @ over controls not if
      name #-1 me @ "^FAIL^You do not control " 4 rotate strcat
      "." strcat ansi_notify
    then
  then
;
 
: table_compare ( possible tomatch -- match? )
  dup strlen strncmp not
;
 
: table_loop
( xnone xdouble str1 x1 ... strn xn n tomatch prog pick -- strmat xmat )
  dup 4 >
  if
    dup rotate over rotate
( ..... tomatch prog found? pick stri xi )
    over 7 pick 7 pick execute
( ..... tomatch prog found? pick stri xi match? )
    if
      0 4 pick - rotate 0 3 pick - rotate
( ..... tomatch prog found? pick )
      swap
      if
        popn
        swap pop "" swap exit
      else
        1 swap
      then
    else
      pop pop
    then
    2 - table_loop
  else
    pop
    if
      pop pop rot pop rot pop
    else
      pop pop pop "" swap
    then
  then
;
 
: table_match
( xnone xdouble str1 x1 ... strn xn n tomatch prog -- strmat xmat )
  0 4 rotate 2 * 4 + table_loop
;
 
: std_table_match
  'table_compare table_match
;
 
: multi_rmatch-loop (i s d -- dn .. d1 n)
  dup not if pop pop exit then
  over over name swap
  "&" explode dup 2 + rotate
  begin
    over not if pop pop 0 break then
    swap 1 - swap dup 4 rotate strip
    dup not if pop pop continue then
    dup "all" stringcmp not if pop "*" then
    "*" swap strcat "*" strcat
    smatch if
      pop begin
	dup while
	1 - swap pop
      repeat
      pop 1 break
    then
  repeat
  if rot 1 + rot 3 pick then
  next multi_rmatch-loop
;
 
: multi_rmatch (d s -- dn .. d1 n)
  over over rmatch dup int 0 >= if
    dup thing? over program? or if
      rot rot pop pop 1 exit
    then
  then
  pop
  0 swap rot contents
  multi_rmatch-loop
;
 
PUBLIC noisy_match
PUBLIC noisy_pmatch
PUBLIC noisy_plmatch
PUBLIC noisy_rmatch
PUBLIC match_controlled
PUBLIC table_match
PUBLIC std_table_match
PUBLIC multi_rmatch
.
c
q
@register lib-match=lib/match
@set $lib/match=L
@set $lib/match=W
@set $lib/match=/_defs/.controls:controls
@set $lib/match=/_defs/.match_controlled:"$lib/match" match "match_controlled" call
@set $lib/match=/_defs/.noisy_match:"$lib/match" match "noisy_match" call
@set $lib/match=/_defs/.noisy_pmatch:"$lib/match" match "noisy_pmatch" call
@set $lib/match=/_defs/.std_table_match:"$lib/match" match "std_table_match" call
@set $lib/match=/_defs/.table_match:"$lib/match" match "table_match" call
@set $lib/match=/_defs/.multi_rmatch:"$lib/match" match "multi_rmatch" call
@set $lib/match=/_defs/MATCHpmatch: "$lib/match" match "pmatch" call
@set $lib/match=/_defs/MATCHmatch_controlled:"$lib/match" match "match_controlled" call
@set $lib/match=/_defs/MATCHnoisy_match:"$lib/match" match "noisy_match" call
@set $lib/match=/_defs/MATCHnoisy_pmatch:"$lib/match" match "noisy_pmatch" call
@set $lib/match=/_defs/MATCHstd_table_match:"$lib/match" match "std_table_match" call
@set $lib/match=/_defs/MATCHtable_match:"$lib/match" match "table_match" call
@set $lib/match=/_defs/MATCHmulti_rmatch:"$lib/match" match "multi_rmatch" call
@set $lib/match=/_defs/MATCH-pmatch: "$lib/match" match "pmatch" call
@set $lib/match=/_defs/MATCH-match_controlled:"$lib/match" match "match_controlled" call
@set $lib/match=/_defs/MATCH-noisy_match:"$lib/match" match "noisy_match" call
@set $lib/match=/_defs/MATCH-noisy_pmatch:"$lib/match" match "noisy_pmatch" call
@set $lib/match=/_defs/MATCH-noisy_plmatch:"$lib/match" match "noisy_plmatch" call
@set $lib/match=/_defs/MATCH-noisy_rmatch:"$lib/match" match "noisy_rmatch" call
@set $lib/match=/_defs/MATCH-std_table_match:"$lib/match" match "std_table_match" call
@set $lib/match=/_defs/MATCH-table_match:"$lib/match" match "table_match" call
@set $lib/match=/_defs/MATCH-multi_rmatch:"$lib/match" match "multi_rmatch" call
@set $lib/match=/_/de:lib-match: List lines 1-60 to see documentation.
@set $lib/match=/_docs:@list $lib/match=1-60
@set $lib/match=/_lib-version:FM$Revision: 1.19 $
@set $lib/match=/_lib-symbol:MATCH
wh me=Installation of lib-match completed.
